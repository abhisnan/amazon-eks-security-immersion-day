AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  EETeamRoleArn:
    Type: String
    Default: 'arn:aws:iam::228271304337:role/WSParticipantRole'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.254.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay-NATGW

  # Public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublic

  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: '10.254.0.0/24'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicA
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: '10.254.1.0/24'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicB
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: '10.254.2.0/24'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicC
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivate
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGateway
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}a'
      CidrBlock: '10.254.128.0/19'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateA
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}b'
      CidrBlock: '10.254.160.0/19'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateB
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub '${AWS::Region}c'
      CidrBlock: '10.254.192.0/19'
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: Amazon EKS Security Immersion Day
      InstanceType: c5.large
      AutomaticStopTimeMinutes: 120
      SubnetId: !Ref PublicSubnetA
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      OwnerArn: !Join
        - ':'
        - - arn
          - !Ref AWS::Partition
          - sts
          - ''
          - !Select [4, !Split [':', !Ref EETeamRoleArn]]
          - !Join
            - '/'
            - - assumed-role
              - !Select [1, !Split ['/', !Select [5, !Split [':', !Ref EETeamRoleArn]]]]
              - Participant

  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
                - !Sub ssm.${AWS::URLSuffix}
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Cloud9InstanceRole

  Cloud9RoleAttacherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:AssociateIamInstanceProfile
                  - ec2:DisassociateIamInstanceProfile
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt Cloud9InstanceRole.Arn
          PolicyName: UpdateEC2InstanceProfile

  Cloud9RoleAttacherFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt Cloud9RoleAttacherRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json

          def restart_instance(instance_id):
            ec2 = boto3.client('ec2')

            try:
              response = ec2.reboot_instances(
                InstanceIds=[
                  instance_id
                ]
              )
            except botocore.exceptions.ClientError as error:
              raise error


          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  client = boto3.client('ec2')
                  response = client.describe_instances(
                      Filters=[{
                          'Name': 'tag:aws:cloud9:environment',
                          'Values': [
                              event['ResourceProperties']['Cloud9EnvironmentId']
                          ]
                      }]
                  )
                  instance = response['Reservations'][0]['Instances'][0]
                  instance_id = instance['InstanceId']
                  security_group_id = instance['NetworkInterfaces'][0]['Groups'][0]['GroupId']
                  print('Instance ID: ' + instance_id);
                  print('Security Group ID: ' + security_group_id);

                  response = client.describe_iam_instance_profile_associations(
                      Filters=[{
                          'Name': 'instance-id',
                          'Values': [instance_id]
                      }]
                  )
                  associations = response['IamInstanceProfileAssociations']
                  if len(associations) == 1:
                      association_id = associations[0]['AssociationId']
                      response = client.disassociate_iam_instance_profile(
                        AssociationId=association_id
                      )
                  client.associate_iam_instance_profile(
                      IamInstanceProfile={
                        'Arn': event['ResourceProperties']['InstanceProfileArn']
                      },
                      InstanceId=instance_id
                  )

                  # Restart the instance
                  restart_instance(instance['InstanceId'])                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'SecurityGroupId': security_group_id
                  })
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  Cloud9RoleAttacherCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt Cloud9RoleAttacherFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      InstanceProfileArn: !GetAtt Cloud9InstanceProfile.Arn

  SSHKeyPairCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - ec2:CreateKeyPair
                - ec2:DeleteKeyPair
              Resource: '*'
          PolicyName: CreateKeyPair

  SSHKeyPairCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt SSHKeyPairCreatorRole.Arn
      Architectures:
        - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              client = boto3.client('ec2')
              if event['RequestType'] == 'Delete':
                  client.delete_key_pair(KeyName=event['PhysicalResourceId'])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              else:
                  key_pair_name = event['LogicalResourceId'] + '-' + \
                      ''.join(random.choice(string.ascii_letters + string.digits)
                              for i in range(12))
                  response = client.create_key_pair(KeyName=key_pair_name, KeyType='rsa')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                    'KeyName': response['KeyName'],
                    'KeyMaterial': response['KeyMaterial']
                  }, response['KeyName'], True)

  SSHKeyPairCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SSHKeyPairCreatorFunction.Arn

  SecretsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: EKS Secrets Encryption Key
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'

  RunCommandLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ssm.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub '${RunCommandLogGroup.Arn}:*'
          PolicyName: Cloud9Initialize

  EC2InitializerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - ec2:DescribeInstances
                  - ec2:AssociateIamInstanceProfile
                  - ec2:ModifyInstanceAttribute
                  - ec2:ReplaceIamInstanceProfileAssociation
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeVolumes
                  - ec2:ModifyVolume
                  - ec2:DescribeVolumesModifications
                  - ec2:RebootInstances
                  - iam:ListInstanceProfiles
                  - iam:PassRole
                  - ssm:DescribeInstanceInformation
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SSMRole.Arn
          PolicyName: Cloud9Initialize

  Cloud9InitializerFunction:
    Type: AWS::Lambda::Function
    DependsOn: [Cloud9Environment]
    Properties:
      Role: !GetAtt EC2InitializerRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 300
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import time

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  ec2 = boto3.client('ec2')
                  response = ec2.describe_instances(
                      Filters=[{
                          'Name': 'tag:aws:cloud9:environment',
                          'Values': [
                              event['ResourceProperties']['Cloud9EnvironmentId']
                          ]
                      }]
                  )
                  instance = response['Reservations'][0]['Instances'][0]
                  instance_id = instance['InstanceId']
                  waiter = ec2.get_waiter('instance_running')
                  waiter.wait(InstanceIds=[instance_id])  


                  # Reboot is required to avoid weird race condition with IAM role and SSM agent
                  # It also causes the file system to expand in the OS
                  print('Rebooting instance')
                  ec2.reboot_instances(
                      InstanceIds=[
                          instance_id,
                      ],
                  )

                  time.sleep(60)

                  print('Waiting for instance to come online in SSM...')
                  ssm = boto3.client('ssm')
                  for i in range(1, 60):
                    response = ssm.describe_instance_information(Filters=[{'Key': 'InstanceIds', 'Values': [instance_id]}])
                    if len(response["InstanceInformationList"]) == 0:
                      print('No instances in SSM')
                    elif len(response["InstanceInformationList"]) > 0 and \
                          response["InstanceInformationList"][0]["PingStatus"] == "Online" and \
                          response["InstanceInformationList"][0]["InstanceId"] == instance_id:
                      print('Instance is online in SSM')
                      break
                    time.sleep(10)                  
                  print('Executing Command in SSM')
                  commands = '''
              su -l -c 'aws ecr get-login-password --region {region} | docker login --username AWS --password-stdin {account_id}.dkr.ecr.{region}.amazonaws.com' ec2-user
              curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o 'awscliv2.zip'
              unzip awscliv2.zip -d /tmp
              sudo /tmp/aws/install --update
              rm -rf aws awscliv2.zip
              curl -sSL -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.2/2023-10-12/bin/linux/amd64/kubectl
              chmod +x /tmp/kubectl
              mv /tmp/kubectl /usr/local/bin/kubectl
              su -l -c 'aws eks update-kubeconfig --name {eks_cluster_name} --region {region} --role-arn {instance_role_arn}' ec2-user
              su -l -c 'mkdir -p ~/.ssh && chmod 700 ~/.ssh' ec2-user
              su -l -c 'echo "export AWS_ACCOUNT_ID={account_id}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export AWS_DEFAULT_REGION={region}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export AWS_REGION={region}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export EKS_CLUSTER={eks_cluster_name}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "Found the Cloud9ID envs {cloud9environment_id}"' ec2-user
              su -l -c 'echo "aws cloud9 update-environment  --environment-id {cloud9environment_id} --managed-credentials-action DISABLE > /dev/null 2>&1" |  tee -a ~/.bash_profile' ec2-user
              su -l -c 'echo "{key_material}" > ~/.ssh/id_rsa' ec2-user
              su -l -c 'chmod 600 ~/.ssh/id_rsa' ec2-user
              curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              chmod +x /tmp/eksctl
              mv /tmp/eksctl /usr/local/bin
              yum -y install jq gettext bash-completion moreutils
              /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl
              /usr/local/bin/eksctl completion bash > /etc/bash_completion.d/eksctl
              su -l -c 'echo "alias k=kubectl" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "complete -F __start_kubectl k" >> ~/.bash_profile' ec2-user
              curl -fsSL -o /tmp/helm.tgz https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
              tar -C /tmp -xzf /tmp/helm.tgz
              mv /tmp/linux-amd64/helm /usr/local/bin/helm
              rm -rf /tmp/helm.tgz /tmp/linux-amd64
              su -l -c 'helm repo add eks https://aws.github.io/eks-charts' ec2-user
              su -l -c 'helm repo update' ec2-user
              volume_id=$(aws --region {region} ec2 describe-volumes --filters Name=attachment.instance-id,Values={instance_id} --query 'Volumes[0].VolumeId' --output text)
              aws --region {region} ec2 modify-volume --volume-id $volume_id --size 30
              # This must be the last line - do not add any lines after this!
              shutdown -r 1
              '''.format(
                      eks_cluster_name=event['ResourceProperties']['EKSClusterName'],
                      region=event['ResourceProperties']['Region'],
                      instance_role_arn=event['ResourceProperties']['InstanceRoleArn'],
                      key_material=event['ResourceProperties']['KeyMaterial'],
                      instance_id=instance_id,
                      account_id=event['ResourceProperties']['AccountId'],
                      cloud9environment_id=event['ResourceProperties']['Cloud9EnvironmentId'],
                  ).split("\n")

                  ssm.send_command(
                      DocumentName='AWS-RunShellScript',
                      DocumentVersion='$LATEST',
                      InstanceIds=[instance_id],
                      TimeoutSeconds=60,
                      ServiceRoleArn=event['ResourceProperties']['SsmRoleArn'],
                      CloudWatchOutputConfig={
                          'CloudWatchLogGroupName': event['ResourceProperties']['LogGroupName'],
                          'CloudWatchOutputEnabled': True
                      },
                      Parameters={
                          'commands': commands
                      }
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  Cloud9Initializer:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt Cloud9InitializerFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      SsmRoleArn: !GetAtt SSMRole.Arn
      LogGroupName: !Ref RunCommandLogGroup
      #EKSClusterName: !Ref EKSCluster
      AccountId: !Sub '${AWS::AccountId}'
      Region: !Sub '${AWS::Region}'
      InstanceRoleArn: !GetAtt Cloud9InstanceRole.Arn
      KeyMaterial: !GetAtt SSHKeyPairCustomResource.KeyMaterial

  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Codebuild Internet Group
      GroupDescription: CodeBuild SecurityGroup
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: 'VPC'
    Value: !Ref VPC
    Export:
      Name: vpcId

  SubnetAPrivate:
    Description: 'Subnet A private'
    Value: !Ref PrivateSubnetA
    Export:
      Name: SubnetAPrivate

  CodeBuildSecurityGroup:
    Description: 'Security group for codebuild'
    Value: !GetAtt Cloud9RoleAttacherCustomResource.SecurityGroupId
    Export:
      Name: CodeBuildSecurityGroup
