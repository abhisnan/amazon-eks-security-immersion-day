AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EETeamRoleArn:
    Type: String
    Default: "IgnoreThisInIsenguardAccountForNow"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.254.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay
  
  
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDay-NATGW

  # Public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublic


  PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.0.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicA
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.1.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicB
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.2.0/24"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPublicC
        - Key: kubernetes.io/role/elb
          Value: 1
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Private subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivate
  PrivateDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      NatGatewayId: !Ref NATGateway
      DestinationCidrBlock: "0.0.0.0/0"
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      CidrBlock: "10.254.128.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateA
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      CidrBlock: "10.254.160.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateB
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      CidrBlock: "10.254.192.0/19"
      Tags:
        - Key: Name
          Value: EKSSecurityImmersionDayPrivateC
        - Key: kubernetes.io/role/internal-elb
          Value: 1
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  Cloud9Environment:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: Amazon EKS Security Immersion Day
      InstanceType: c5.large
      AutomaticStopTimeMinutes: 60
      SubnetId: !Ref PublicSubnetA
      ImageId: resolve:ssm:/aws/service/cloud9/amis/amazonlinux-2-x86_64
      OwnerArn: arn:aws:iam::000474600478:user/jp

  Cloud9InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ec2.${AWS::URLSuffix}
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  Cloud9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Cloud9InstanceRole

  Cloud9RoleAttacherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - ec2:DescribeInstances
                - ec2:DescribeIamInstanceProfileAssociations
                - ec2:AssociateIamInstanceProfile
                - ec2:DisassociateIamInstanceProfile
                - iam:PassRole
              Resource: "*"
          PolicyName: UpdateEC2InstanceProfile

  Cloud9RoleAttacherFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt Cloud9RoleAttacherRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  client = boto3.client('ec2')
                  response = client.describe_instances(
                      Filters=[{
                          'Name': 'tag:aws:cloud9:environment',
                          'Values': [
                              event['ResourceProperties']['Cloud9EnvironmentId']
                          ]
                      }]
                  )
                  instance = response['Reservations'][0]['Instances'][0]
                  instance_id = instance['InstanceId']
                  security_group_id = instance['NetworkInterfaces'][0]['Groups'][0]['GroupId']
                  print('Instance ID: ' + instance_id);
                  print('Security Group ID: ' + security_group_id);

                  response = client.describe_iam_instance_profile_associations(
                      Filters=[{
                          'Name': 'instance-id',
                          'Values': [instance_id]
                      }]
                  )
                  associations = response['IamInstanceProfileAssociations']
                  if len(associations) == 1:
                      association_id = associations[0]['AssociationId']
                      response = client.disassociate_iam_instance_profile(
                        AssociationId=association_id
                      )
                  client.associate_iam_instance_profile(
                      IamInstanceProfile={
                        'Arn': event['ResourceProperties']['InstanceProfileArn']
                      },
                      InstanceId=instance_id
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'SecurityGroupId': security_group_id
                  })
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  Cloud9RoleAttacherCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt Cloud9RoleAttacherFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      InstanceProfileArn: !GetAtt Cloud9InstanceProfile.Arn

  SSHKeyPairCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - ec2:CreateKeyPair
                - ec2:DeleteKeyPair
              Resource: "*"
          PolicyName: CreateKeyPair

  SSHKeyPairCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt SSHKeyPairCreatorRole.Arn
      Architectures:
        - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              client = boto3.client('ec2')
              if event['RequestType'] == 'Delete':
                  client.delete_key_pair(KeyName=event['PhysicalResourceId'])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              else:
                  key_pair_name = event['LogicalResourceId'] + '-' + \
                      ''.join(random.choice(string.ascii_letters + string.digits)
                              for i in range(12))
                  response = client.create_key_pair(KeyName=key_pair_name, KeyType='rsa')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                    'KeyName': response['KeyName'],
                    'KeyMaterial': response['KeyMaterial']
                  }, response['KeyName'], True)

  SSHKeyPairCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SSHKeyPairCreatorFunction.Arn

  SecretsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: EKS Secrets Encryption Key
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
          Action: "kms:*"
          Resource: "*"

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub eks.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSClusterCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                  - eks:CreateCluster
                  - eks:DeleteCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt Cloud9InstanceRole.Arn
          PolicyName: CreateEKSCluster

  EKSClusterCreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt EKSClusterCreatorRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 900
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string


          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))

              try:
                  if event['RequestType'] == 'Delete':
                      eks = boto3.client('eks')
                      eks.delete_cluster(name=event['PhysicalResourceId'])
                      waiter = eks.get_waiter('cluster_deleted')
                      waiter.wait(name=event['PhysicalResourceId'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  sts = boto3.client('sts')
                  response = sts.assume_role(
                      RoleArn=event['ResourceProperties']['CreatorRoleArn'],
                      RoleSessionName='Creator'
                  )
                  eks = boto3.client('eks',
                                    aws_access_key_id=response['Credentials']['AccessKeyId'],
                                    aws_secret_access_key=response['Credentials']['SecretAccessKey'],
                                    aws_session_token=response['Credentials']['SessionToken']
                                    )

                  #cluster_name = event['LogicalResourceId'] + '-' + \
                  #    ''.join(random.choice(string.ascii_letters + string.digits)
                  #            for i in range(12))
                  cluster_name='eksworkshop-eksctl'

                  print('Creating cluster ' + cluster_name)
                  response = eks.create_cluster(
                      name=cluster_name,
                      version='1.24',
                      roleArn=event['ResourceProperties']['ClusterRoleArn'],
                      resourcesVpcConfig={
                          'subnetIds': event['ResourceProperties']['SubnetIds'],
                          'endpointPublicAccess': False,
                          'endpointPrivateAccess': True
                      },
                      logging={
                          'clusterLogging': [
                              {
                                  'types': [
                                      'api', 'audit', 'authenticator', 'controllerManager', 'scheduler',
                                  ],
                                  'enabled': True
                              },
                          ]
                      },
                      encryptionConfig=[
                          {
                              'resources': [
                                  'secrets',
                              ],
                              'provider': {
                                  'keyArn': event['ResourceProperties']['KeyArn']
                              }
                          },
                      ]
                  )

                  print('Waiting for cluster to become active...')
                  waiter = eks.get_waiter('cluster_active')
                  waiter.wait(name=cluster_name)
                  response = eks.describe_cluster(name=cluster_name)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'OpenIdConnectIssuerUrl': response['cluster']['identity']['oidc']['issuer'],
                      'ClusterSecurityGroupId': response['cluster']['resourcesVpcConfig']['clusterSecurityGroupId'],
                      'CertificateAuthorityData': response['cluster']['certificateAuthority']['data'],
                      'Endpoint': response['cluster']['endpoint']
                  }, cluster_name)
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  EKSCluster:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt EKSClusterCreatorFunction.Arn
      CreatorRoleArn: !GetAtt Cloud9InstanceRole.Arn
      ClusterRoleArn: !GetAtt EKSClusterRole.Arn
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      KeyArn: !GetAtt SecretsEncryptionKey.Arn

  EKSNodegroupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ec2.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  EKSNodegroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      InstanceTypes:
        - m5.large
      RemoteAccess:
        Ec2SshKey: !GetAtt SSHKeyPairCustomResource.KeyName
        SourceSecurityGroups:
          - !GetAtt Cloud9RoleAttacherCustomResource.SecurityGroupId
      ScalingConfig:
        DesiredSize: 2
        MinSize: 2
        MaxSize: 10

  EKSNodegroupBottlerocket:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt EKSNodegroupRole.Arn
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      AmiType: BOTTLEROCKET_x86_64
      CapacityType: ON_DEMAND
      InstanceTypes:
        - m5.large
      RemoteAccess:
        Ec2SshKey: !GetAtt SSHKeyPairCustomResource.KeyName
        SourceSecurityGroups:
          - !GetAtt Cloud9RoleAttacherCustomResource.SecurityGroupId
      ScalingConfig:
        DesiredSize: 2
        MinSize: 2
        MaxSize: 10

  #
  # VPC CNI Fixup to use IRSA
  #
  RoleCreatorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - iam:CreateRole
                - iam:DeleteRole
                - iam:AttachRolePolicy
                - iam:DetachRolePolicy
              Resource: "*"
          PolicyName: CreateRole

  IRSACreatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt RoleCreatorRole.Arn
      Architectures:
        - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json
          import random
          import string
          import traceback


          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              client = boto3.client('iam')
              try:
                  if event['RequestType'] == 'Delete':
                      client.detach_role_policy(
                          PolicyArn='arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy',
                          RoleName=event['PhysicalResourceId']
                      )
                      client.delete_role(RoleName=event['PhysicalResourceId'])
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  role_name = event['LogicalResourceId'] + '-' + \
                      ''.join(random.choice(string.ascii_letters + string.digits)
                              for i in range(12))
                  oidc_provider_arn = event['ResourceProperties']['OidcProviderArn']
                  oidc_provider_suffix = event['ResourceProperties']['OidcProviderArn'].split(
                      '/', 1)[-1]
                  assume_role_policy = json.dumps({
                      "Version": "2012-10-17",
                      "Statement": [
                          {
                              "Effect": "Allow",
                              "Principal": {
                                  "Federated": oidc_provider_arn
                              },
                              "Action": "sts:AssumeRoleWithWebIdentity",
                              "Condition": {
                                  "StringEquals": {
                                      oidc_provider_suffix + ":aud": "sts.amazonaws.com",
                                      oidc_provider_suffix + ":sub": "system:serviceaccount:" + event['ResourceProperties']['Namespace'] + ":" + event['ResourceProperties']['ServiceAccount']
                                  }
                              }
                          }
                      ]
                  })
                  create_role_response = client.create_role(
                      RoleName=role_name,
                      AssumeRolePolicyDocument=assume_role_policy
                  )
                  role_policy_arn = event['ResourceProperties'].get('RolePolicyArn')
                  if role_policy_arn:
                      client.attach_role_policy(
                          PolicyArn=role_policy_arn,
                          RoleName=role_name
                      )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                      'Arn': create_role_response['Role']['Arn']
                  }, role_name)
              except Exception as err:
                  traceback.print_exc()
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  VPCCNIRole:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IRSACreatorFunction.Arn
      OidcProviderArn: !GetAtt OIDCProvider.Arn
      Namespace: kube-system
      ServiceAccount: aws-node
      RolePolicyArn: "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"

  LoadBalancerControllerRole:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt IRSACreatorFunction.Arn
      OidcProviderArn: !GetAtt OIDCProvider.Arn
      Namespace: kube-system
      ServiceAccount: aws-load-balancer-controller

  LoadBalancerControllerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref LoadBalancerControllerRole
      PolicyName: LoadBalancerControllerPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource: "*"
            Condition:
              StringEquals:
                iam:AWSServiceName: elasticloadbalancing.amazonaws.com
          - Effect: Allow
            Action:
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAddresses
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeInternetGateways
              - ec2:DescribeVpcs
              - ec2:DescribeVpcPeeringConnections
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribeInstances
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeTags
              - ec2:GetCoipPoolUsage
              - ec2:DescribeCoipPools
              - elasticloadbalancing:DescribeLoadBalancers
              - elasticloadbalancing:DescribeLoadBalancerAttributes
              - elasticloadbalancing:DescribeListeners
              - elasticloadbalancing:DescribeListenerCertificates
              - elasticloadbalancing:DescribeSSLPolicies
              - elasticloadbalancing:DescribeRules
              - elasticloadbalancing:DescribeTargetGroups
              - elasticloadbalancing:DescribeTargetGroupAttributes
              - elasticloadbalancing:DescribeTargetHealth
              - elasticloadbalancing:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolClient
              - acm:ListCertificates
              - acm:DescribeCertificate
              - iam:ListServerCertificates
              - iam:GetServerCertificate
              - waf-regional:GetWebACL
              - waf-regional:GetWebACLForResource
              - waf-regional:AssociateWebACL
              - waf-regional:DisassociateWebACL
              - wafv2:GetWebACL
              - wafv2:GetWebACLForResource
              - wafv2:AssociateWebACL
              - wafv2:DisassociateWebACL
              - shield:GetSubscriptionState
              - shield:DescribeProtection
              - shield:CreateProtection
              - shield:DeleteProtection
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateSecurityGroup
            Resource: "*"
          - Effect: Allow
            Action:
              - ec2:CreateTags
            Resource: arn:aws:ec2:*:*:security-group/*
            Condition:
              StringEquals:
                ec2:CreateAction: CreateSecurityGroup
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DeleteTags
            Resource: arn:aws:ec2:*:*:security-group/*
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:RevokeSecurityGroupIngress
              - ec2:DeleteSecurityGroup
            Resource: "*"
            Condition:
              "Null":
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateLoadBalancer
              - elasticloadbalancing:CreateTargetGroup
            Resource: "*"
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:CreateListener
              - elasticloadbalancing:DeleteListener
              - elasticloadbalancing:CreateRule
              - elasticloadbalancing:DeleteRule
            Resource: "*"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
              - arn:aws:elasticloadbalancing:*:*:loadbalancer/net/*/*
              - arn:aws:elasticloadbalancing:*:*:loadbalancer/app/*/*
            Condition:
              "Null":
                aws:RequestTag/elbv2.k8s.aws/cluster: "true"
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:AddTags
              - elasticloadbalancing:RemoveTags
            Resource:
              - arn:aws:elasticloadbalancing:*:*:listener/net/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener/app/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener-rule/net/*/*/*
              - arn:aws:elasticloadbalancing:*:*:listener-rule/app/*/*/*
          - Effect: Allow
            Action:
              - elasticloadbalancing:ModifyLoadBalancerAttributes
              - elasticloadbalancing:SetIpAddressType
              - elasticloadbalancing:SetSecurityGroups
              - elasticloadbalancing:SetSubnets
              - elasticloadbalancing:DeleteLoadBalancer
              - elasticloadbalancing:ModifyTargetGroup
              - elasticloadbalancing:ModifyTargetGroupAttributes
              - elasticloadbalancing:DeleteTargetGroup
            Resource: "*"
            Condition:
              "Null":
                aws:ResourceTag/elbv2.k8s.aws/cluster: "false"
          - Effect: Allow
            Action:
              - elasticloadbalancing:RegisterTargets
              - elasticloadbalancing:DeregisterTargets
            Resource: arn:aws:elasticloadbalancing:*:*:targetgroup/*/*
          - Effect: Allow
            Action:
              - elasticloadbalancing:SetWebAcl
              - elasticloadbalancing:ModifyListener
              - elasticloadbalancing:AddListenerCertificates
              - elasticloadbalancing:RemoveListenerCertificates
              - elasticloadbalancing:ModifyRule
            Resource: "*"

  # OIDC provider (for EKS IAM Roles for Service Accounts)
  ThumbprintExtractorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  ThumbprintExtractorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ThumbprintExtractorRole.Arn
      Architectures:
        - arm64
      Runtime: nodejs16.x
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          const response = require('cfn-response');
          const tls = require('tls');
          const url = require('url');

          exports.handler = function (event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              if (event.RequestType === 'Delete') {
                  response.send(event, context, 'SUCCESS');
                  return;
              }
              const parsedUrl = url.parse(event.ResourceProperties.Url);
              const socket = tls.connect({
                  host: parsedUrl.host,
                  port: parsedUrl.port || 443,
                  rejectUnauthorized: false,
              });
              socket.on('secureConnect', () => {
                  let cert = socket.getPeerCertificate(true);
                  // Obtain the last **intermediate** certificate in the chain
                  // See https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_oidc_verify-thumbprint.html
                  while (cert.issuerCertificate.issuerCertificate !== cert.issuerCertificate) {
                      cert = cert.issuerCertificate;
                  }
                  socket.destroy();
                  response.send(event, context, 'SUCCESS', {
                      Fingerprint: cert.fingerprint.replace(/:/g, '')
                  });
              });
          }

  ThumbprintExtractorCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ThumbprintExtractorFunction.Arn
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl

  OIDCProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: !GetAtt EKSCluster.OpenIdConnectIssuerUrl
      ClientIdList:
        - !Sub sts.${AWS::URLSuffix}
      ThumbprintList:
        - !GetAtt ThumbprintExtractorCustomResource.Fingerprint

  #
  # Prepare Cloud9 instance
  #
  AllowCloud9ToAccessCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow connections from Cloud9 instance
      IpProtocol: tcp
      GroupId: !GetAtt EKSCluster.ClusterSecurityGroupId
      SourceSecurityGroupId: !GetAtt Cloud9RoleAttacherCustomResource.SecurityGroupId
      FromPort: 443
      ToPort: 443

  RunCommandLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete

  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub ssm.${AWS::URLSuffix}
          Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "${RunCommandLogGroup.Arn}:*"
          PolicyName: Cloud9Initialize

  EC2InitializerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: !Sub lambda.${AWS::URLSuffix}
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ec2:DescribeInstances
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt SSMRole.Arn
          PolicyName: Cloud9Initialize

  Cloud9InitializerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt EC2InitializerRole.Arn
      #Architectures:
      #  - arm64
      Runtime: python3.9
      Handler: index.handler
      Timeout: 10
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          import json

          def handler(event, context):
              print("REQUEST RECEIVED: \n" + json.dumps(event))
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  return

              try:
                  client = boto3.client('ec2')
                  response = client.describe_instances(
                      Filters=[{
                          'Name': 'tag:aws:cloud9:environment',
                          'Values': [
                              event['ResourceProperties']['Cloud9EnvironmentId']
                          ]
                      }]
                  )
                  instance = response['Reservations'][0]['Instances'][0]
                  instance_id = instance['InstanceId']
                  commands = '''
              su -l -c 'aws ecr get-login-password --region {region} | docker login --username AWS --password-stdin {account_id}.dkr.ecr.{region}.amazonaws.com' ec2-user
              curl -sSL -o /tmp/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl
              chmod +x /tmp/kubectl
              mv /tmp/kubectl /usr/local/bin/kubectl

              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

              su -l -c 'aws eks update-kubeconfig --name {eks_cluster_name} --region {region} --role-arn {instance_role_arn}' ec2-user
              su -l -c 'mkdir -p ~/.ssh && chmod 700 ~/.ssh' ec2-user
              su -l -c 'echo "export AWS_ACCOUNT_ID={account_id}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export AWS_DEFAULT_REGION={region}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export AWS_REGION={region}" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "export EKS_CLUSTER={eks_cluster_name}" >> ~/.bash_profile' ec2-user
              su -l -c 'aws cloud9 update-environment  --environment-id $C9_PID --managed-credentials-action DISABLE > /dev/null 2>&1' ec2-user
              su -l -c 'rm -vf ~/.aws/credentials' ec2-user
              su -l -c 'echo "{key_material}" > ~/.ssh/id_rsa' ec2-user
              su -l -c 'chmod 600 ~/.ssh/id_rsa' ec2-user
              curl -sSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
              chmod +x /tmp/eksctl
              mv /tmp/eksctl /usr/local/bin
              yum -y install jq gettext bash-completion moreutils
              /usr/local/bin/kubectl completion bash > /etc/bash_completion.d/kubectl
              /usr/local/bin/eksctl completion bash > /etc/bash_completion.d/eksctl
              su -l -c 'echo "alias k=kubectl" >> ~/.bash_profile' ec2-user
              su -l -c 'echo "complete -F __start_kubectl k" >> ~/.bash_profile' ec2-user
              su -l -c 'kubectl annotate --overwrite serviceaccount -n kube-system aws-node eks.amazonaws.com/role-arn={vpc_cni_role_arn}' ec2-user
              su -l -c 'kubectl delete pods -n kube-system -l k8s-app=aws-node' ec2-user
              curl -fsSL -o /tmp/helm.tgz https://get.helm.sh/helm-v3.7.1-linux-amd64.tar.gz
              tar -C /tmp -xzf /tmp/helm.tgz
              mv /tmp/linux-amd64/helm /usr/local/bin/helm
              rm -rf /tmp/helm.tgz /tmp/linux-amd64
              cat <<-"EOF" > /tmp/aws-load-balancer-controller-serviceaccount.yaml
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            labels:
              app.kubernetes.io/component: controller
              app.kubernetes.io/name: aws-load-balancer-controller
            name: aws-load-balancer-controller
            namespace: kube-system
            annotations:
              eks.amazonaws.com/role-arn: {load_balancer_controller_role_arn}
          EOF
              chmod 644 /tmp/aws-load-balancer-controller-serviceaccount.yaml
              su -l -c 'kubectl apply -f /tmp/aws-load-balancer-controller-serviceaccount.yaml' ec2-user
              su -l -c 'helm repo add eks https://aws.github.io/eks-charts' ec2-user
              su -l -c 'helm repo update' ec2-user
              su -l -c 'helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName={eks_cluster_name} --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller' ec2-user
              su -l -c 'kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml' ec2-user
              volume_id=$(aws --region {region} ec2 describe-volumes --filters Name=attachment.instance-id,Values={instance_id} --query 'Volumes[0].VolumeId' --output text)
              aws --region {region} ec2 modify-volume --volume-id $volume_id --size 30
              # This must be the last line - do not add any lines after this!
              shutdown -r 1
              '''.format(
                      eks_cluster_name=event['ResourceProperties']['EKSClusterName'],
                      region=event['ResourceProperties']['Region'],
                      instance_role_arn=event['ResourceProperties']['InstanceRoleArn'],
                      load_balancer_controller_role_arn=event['ResourceProperties']['LoadBalancerControllerRoleArn'],
                      key_material=event['ResourceProperties']['KeyMaterial'],
                      instance_id=instance_id,
                      vpc_cni_role_arn=event['ResourceProperties']['VpcCniRoleArn'],
                      account_id=event['ResourceProperties']['AccountId'],
                  ).split("\n")
                  client = boto3.client('ssm')
                  client.send_command(
                      DocumentName='AWS-RunShellScript',
                      DocumentVersion='$LATEST',
                      InstanceIds=[instance_id],
                      TimeoutSeconds=30,
                      ServiceRoleArn=event['ResourceProperties']['SsmRoleArn'],
                      CloudWatchOutputConfig={
                          'CloudWatchLogGroupName': event['ResourceProperties']['LogGroupName'],
                          'CloudWatchOutputEnabled': True
                      },
                      Parameters={
                          'commands': commands
                      }
                  )
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as err:
                  print(err)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  Cloud9Initializer:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt Cloud9InitializerFunction.Arn
      Cloud9EnvironmentId: !Ref Cloud9Environment
      SsmRoleArn: !GetAtt SSMRole.Arn
      LogGroupName: !Ref RunCommandLogGroup
      EKSClusterName: !Ref EKSCluster
      AccountId: !Sub "${AWS::AccountId}"
      Region: !Sub "${AWS::Region}"
      InstanceRoleArn: !GetAtt Cloud9InstanceRole.Arn
      LoadBalancerControllerRoleArn: !GetAtt LoadBalancerControllerRole.Arn
      KeyMaterial: !GetAtt SSHKeyPairCustomResource.KeyMaterial
      VpcCniRoleArn: !GetAtt VPCCNIRole.Arn
